// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/interfaces.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	entity "myhealth-service/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGlucoseDataRepo is a mock of GlucoseDataRepo interface.
type MockGlucoseDataRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGlucoseDataRepoMockRecorder
}

// MockGlucoseDataRepoMockRecorder is the mock recorder for MockGlucoseDataRepo.
type MockGlucoseDataRepoMockRecorder struct {
	mock *MockGlucoseDataRepo
}

// NewMockGlucoseDataRepo creates a new mock instance.
func NewMockGlucoseDataRepo(ctrl *gomock.Controller) *MockGlucoseDataRepo {
	mock := &MockGlucoseDataRepo{ctrl: ctrl}
	mock.recorder = &MockGlucoseDataRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlucoseDataRepo) EXPECT() *MockGlucoseDataRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGlucoseDataRepo) Create(arg0 context.Context, arg1 entity.GlucoseRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGlucoseDataRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGlucoseDataRepo)(nil).Create), arg0, arg1)
}

// IsExistsByDeviceRecordID mocks base method.
func (m *MockGlucoseDataRepo) IsExistsByDeviceRecordID(userID, deviceRecordID string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistsByDeviceRecordID", userID, deviceRecordID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistsByDeviceRecordID indicates an expected call of IsExistsByDeviceRecordID.
func (mr *MockGlucoseDataRepoMockRecorder) IsExistsByDeviceRecordID(userID, deviceRecordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistsByDeviceRecordID", reflect.TypeOf((*MockGlucoseDataRepo)(nil).IsExistsByDeviceRecordID), userID, deviceRecordID)
}

// MockGlucoseTracking is a mock of GlucoseTracking interface.
type MockGlucoseTracking struct {
	ctrl     *gomock.Controller
	recorder *MockGlucoseTrackingMockRecorder
}

// MockGlucoseTrackingMockRecorder is the mock recorder for MockGlucoseTracking.
type MockGlucoseTrackingMockRecorder struct {
	mock *MockGlucoseTracking
}

// NewMockGlucoseTracking creates a new mock instance.
func NewMockGlucoseTracking(ctrl *gomock.Controller) *MockGlucoseTracking {
	mock := &MockGlucoseTracking{ctrl: ctrl}
	mock.recorder = &MockGlucoseTrackingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGlucoseTracking) EXPECT() *MockGlucoseTrackingMockRecorder {
	return m.recorder
}

// CreateGlucoseRecord mocks base method.
func (m *MockGlucoseTracking) CreateGlucoseRecord(ctx context.Context, userID string, gr entity.GlucoseRecord) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGlucoseRecord", ctx, userID, gr)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGlucoseRecord indicates an expected call of CreateGlucoseRecord.
func (mr *MockGlucoseTrackingMockRecorder) CreateGlucoseRecord(ctx, userID, gr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGlucoseRecord", reflect.TypeOf((*MockGlucoseTracking)(nil).CreateGlucoseRecord), ctx, userID, gr)
}

// GetNewOrUpdatedRecords mocks base method.
func (m *MockGlucoseTracking) GetNewOrUpdatedRecords(arg0 context.Context) ([]entity.GlucoseRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOrUpdatedRecords", arg0)
	ret0, _ := ret[0].([]entity.GlucoseRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOrUpdatedRecords indicates an expected call of GetNewOrUpdatedRecords.
func (mr *MockGlucoseTrackingMockRecorder) GetNewOrUpdatedRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOrUpdatedRecords", reflect.TypeOf((*MockGlucoseTracking)(nil).GetNewOrUpdatedRecords), arg0)
}
